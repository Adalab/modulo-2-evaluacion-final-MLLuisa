{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n/*\nPUNTO 5 BONUS\n1. Borrar favoritos del localStorage y otras cosas mas. Mirar el enunciado\n\nPUNTO 6 BONUS\n1. Afinar la maquetacion\nTareas :\n1. boton X para poder cancelar los favoritos y los datos del local storage\n2. añadir o quitar series desde la derecha haciendo click sobre ellas y si buscamos series que son favoritas deberian estar resaltadas\n3.[X] boton al final de favoritos para borrarlos todos\n*/\n\nconst buttonSearch = document.querySelector('.js-button-search');\nconst inputSearch = document.querySelector('.js-input');\nlet listAnime = document.querySelector('.js-list-anime');\nconst listAnimeFavorite = document.querySelector('.js-list-anime-favorite');\nconst buttonReset = document.querySelector('.js-button-reset');\nconst removeAllFavList = document.querySelector('.js-fav-list-remove-all');\nlet animeSeriesList = [];\nlet animeFavouriteList; // Animefavoritelist no habria que igualarlo a array vacio\n// Local storage\n/* Al cargar la pagina vemos el local storage y si hay algo, animeFavoriteList seria igual a lo que haya despues del hacer el get del local  (localStorage.getItem('animeFavList');)*/\nif(localStorage.getItem(\"animeFavouriteList\")) {\n    animeFavouriteList = JSON.parse(localStorage.getItem(\"animeFavouriteList\"))\n    renderFavoriteAnime(animeFavouriteList);\n} else {\n    animeFavouriteList = [];\n}\n\n// Images/Placeholder\nconst noImage = \"https://cdn.myanimelist.net/img/sp/icon/apple-touch-icon-256.png\";\nconst newImage = \"https://via.placeholder.com/210x295/ﬀﬀﬀ/666666/?text=TV\";\n\nfunction addListenerToAnimeListItem() {\n    const singleElement = document.querySelectorAll('.js-single-element');\n    for (const element of singleElement) {\n        element.addEventListener(\"click\" , handleClickFavourite);\n    }\n}\n\n// Shows the anime list afer input user\nfunction renderAnime(list) {\n    let html = \"\";\n    for (const eachTitlePhoto of list) {\n    if(eachTitlePhoto.images.jpg.image_url === noImage || eachTitlePhoto.images.jpg.image_url === null) {\n        html += `<li class=\"js-single-element\" id=\"${eachTitlePhoto.mal_id}\"><img src=\"${newImage}\" alt=\"new-image\" /><h3 class=\"title-anime\">${eachTitlePhoto.title}</h3></li>`;\n    } else {\n        html += `<li class=\"js-single-element\" id=\"${eachTitlePhoto.mal_id}\"><img src=\"${eachTitlePhoto.images.jpg.image_url}\" alt=\"serie-anime\" />\n        <h3 class=\"title-anime\">${eachTitlePhoto.title}</h3></li>`;\n    }\n    }\n    listAnime.innerHTML = html;\n    addListenerToAnimeListItem();\n}\n\n// Show favourite anime list\nfunction renderFavoriteAnime(list) {\n    let html = \"\";\n    if(list.length > 0) {\n        for (const listFavorite of list) {\n        html += `<li class=\"js-single-element\" id=\"${listFavorite.mal_id}\">\n        <img src=\"${listFavorite.images.jpg.image_url}\" alt=\"new-image\" /><h3 class=\"title-anime list-favorite\">${listFavorite.title}</h3><button class=\"js-remove-item-button\">X</button>\n        </li>`;\n    }\n    } \n    listAnimeFavorite.innerHTML = html;\n}\n\n// Show favorite after user click (left side) and list anime (right side)\nfunction handleClickFavourite(ev) {\n    let currentLiElement = ev.target.parentElement\n    const idSelected = parseInt(currentLiElement.id);\n    const animeFound = animeSeriesList.find((anime) => anime.mal_id === idSelected);\n    const animeFavourite = animeFavouriteList.findIndex((fav) => fav.mal_id === idSelected);\n    if (animeFavourite === -1) {\n        currentLiElement.classList.add(\"favorite\");\n        animeFavouriteList.push(animeFound);\n    } else {\n        animeFavouriteList.splice(animeFavouriteList, 1)\n        currentLiElement.classList.remove(\"favorite\");\n    }\n    renderFavoriteAnime(animeFavouriteList);\n    localStorage.setItem(\"animeFavouriteList\", JSON.stringify(animeFavouriteList));\n}\n\n// Reset function to delete search and list anime\nfunction handleClickReset(ev){\n    ev.preventDefault();\n    inputSearch.value = \"\";\n    listAnime.innerHTML = \"\";\n}\n\n// Click reset anime fav list\nconst buttonRemoveItemFavList = document.querySelector('js-remove-item-button');\nif(buttonRemoveItemFavList) {\n    buttonRemoveItemFavList.addEventListener(\"click\", handleRemoveFavoriteItem);\n    function handleRemoveFavoriteItem(ev) {\n        ev.preventDefault();\n        console.log(\"soy la X\");\n    }\n}\n\nfunction removeFavList(ev) {\n    ev.preventDefault();\n    listAnimeFavorite.innerHTML = \"\";\n    console.log(\"soy el click fav list\");\n}\n\n// Fetch to anime api after user button search click\nfunction handleClickSearch(ev) {\n    ev.preventDefault();\n    const inputValue = inputSearch.value.toLowerCase();\n    fetch(`https://api.jikan.moe/v4/anime?q=${inputValue}`)\n    .then((response) => response.json())\n    .then((data) => {\n        animeSeriesList = data.data;\n        console.log(animeSeriesList);\n        renderAnime(animeSeriesList);\n    })\n    // .catch((error) => renderError(error.message))\n}\n\nbuttonSearch.addEventListener(\"click\" , handleClickSearch);\nbuttonReset.addEventListener(\"click\", handleClickReset);\nremoveAllFavList.addEventListener(\"click\", removeFavList);\n\n\n"]}